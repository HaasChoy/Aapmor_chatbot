{"id": "4ae59557-f999-43cc-9679-69b864c49601", "text": "8.5. Multivariate Multi-step CNN Models 119\nWe can now develop a 1D CNN model for this dataset. We will use a vector-output model\nin this case. As such, we must ï¬‚atten the three-dimensional structure of the output portion of\neach sample in order to train the model. This means, instead of predicting two steps for each\nseries, the model is trained on and expected to predict a vector of six numbers directly.\n# flatten output\nn_output = y.shape[1] * y.shape[2]\ny = y.reshape((y.shape[0], n_output))", "metadata": {"producer": "pdfTeX-1.40.18", "creator": "LaTeX with hyperref package", "creationdate": "2018-11-01T07:53:25+11:00", "author": "", "title": "", "subject": "", "keywords": "", "moddate": "2018-11-01T07:53:25+11:00", "trapped": "/False", "ptex.fullbanner": "This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3", "source": "/home/haas/rag_proj/samples/AAPMOR Website/Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python (Jason Brownlee) (Z-Library).pdf", "total_pages": 574, "page": 135, "page_label": "119"}}
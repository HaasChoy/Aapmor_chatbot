{"id": "4faf84ad-b29b-4b52-beeb-46216e2f0d03", "text": "model.fit(train_x, train_y, epochs=epochs, batch_size=batch_size, verbose=verbose)\nreturn model\nListing 20.29: Example of a function for deﬁning and ﬁtting a CNN Encoder-Decoder LSTM\nmodel.\nWe are now ready to try the encoder-decoder architecture with a CNN encoder. The complete\ncode listing is provided below.\n# univariate multi-step encoder-decoder cnn-lstm for the power usage dataset\nfrom math import sqrt\nfrom numpy import split\nfrom numpy import array\nfrom pandas import read_csv", "metadata": {"producer": "pdfTeX-1.40.18", "creator": "LaTeX with hyperref package", "creationdate": "2018-11-01T07:53:25+11:00", "author": "", "title": "", "subject": "", "keywords": "", "moddate": "2018-11-01T07:53:25+11:00", "trapped": "/False", "ptex.fullbanner": "This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3", "source": "/home/haas/rag_proj/samples/AAPMOR Website/Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python (Jason Brownlee) (Z-Library).pdf", "total_pages": 574, "page": 432, "page_label": "416"}}
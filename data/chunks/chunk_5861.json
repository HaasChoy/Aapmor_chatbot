{"id": "f0a09d9f-4186-4877-80f8-7d92ada3b68e", "text": "8.3. Multivariate CNN Models 98\nbeing modeled. For example, it allows you to conﬁgure each submodel diﬀerently for each input\nseries, such as the number of ﬁlter maps and the kernel size. This type of model can be deﬁned\nin Keras using the Keras functional API. First, we can deﬁne the ﬁrst input model as a 1D\nCNN with an input layer that expects vectors with n steps and 1 feature.\n# first input model\nvisible1 = Input(shape=(n_steps, n_features))", "metadata": {"producer": "pdfTeX-1.40.18", "creator": "LaTeX with hyperref package", "creationdate": "2018-11-01T07:53:25+11:00", "author": "", "title": "", "subject": "", "keywords": "", "moddate": "2018-11-01T07:53:25+11:00", "trapped": "/False", "ptex.fullbanner": "This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3", "source": "/home/haas/rag_proj/samples/AAPMOR Website/Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python (Jason Brownlee) (Z-Library).pdf", "total_pages": 574, "page": 114, "page_label": "98"}}
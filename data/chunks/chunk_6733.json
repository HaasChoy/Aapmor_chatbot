{"id": "9bbb7da1-3ae5-404c-a025-cc8db7a96e65", "text": "model.add(Dense(1))\nmodel.compile(loss=' mse' , optimizer=' adam' )\n# fit\nmodel.fit(train_x, train_y, epochs=n_epochs, batch_size=n_batch, verbose=0)\nreturn model\nListing 14.46: Example of a function for deﬁning and ﬁtting a CNN-LSTM model.\nMaking a prediction with the ﬁt model is much the same as the LSTM or CNN, although\nwith the addition of splitting each sample into subsequences with a given number of time steps.\n# prepare data", "metadata": {"producer": "pdfTeX-1.40.18", "creator": "LaTeX with hyperref package", "creationdate": "2018-11-01T07:53:25+11:00", "author": "", "title": "", "subject": "", "keywords": "", "moddate": "2018-11-01T07:53:25+11:00", "trapped": "/False", "ptex.fullbanner": "This is pdfTeX, Version 3.14159265-2.6-1.40.18 (TeX Live 2017) kpathsea version 6.2.3", "source": "/home/haas/rag_proj/samples/AAPMOR Website/Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python (Jason Brownlee) (Z-Library).pdf", "total_pages": 574, "page": 293, "page_label": "277"}}